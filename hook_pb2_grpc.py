# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import hook_pb2 as hook__pb2


class StateChangerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SubscribeChange = channel.unary_stream(
        '/io.spoud.sdm.logistics.hooks.v1alpha.StateChanger/SubscribeChange',
        request_serializer=hook__pb2.SubscribeChangeRequest.SerializeToString,
        response_deserializer=hook__pb2.SubscribeChangeResponse.FromString,
        )


class StateChangerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def SubscribeChange(self, request, context):
    """subscribe to any changes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_StateChangerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SubscribeChange': grpc.unary_stream_rpc_method_handler(
          servicer.SubscribeChange,
          request_deserializer=hook__pb2.SubscribeChangeRequest.FromString,
          response_serializer=hook__pb2.SubscribeChangeResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'io.spoud.sdm.logistics.hooks.v1alpha.StateChanger', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
